// add a new relation between cinema and movie many to many
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model movie {
  id          Int       @id @default(autoincrement())
  title       String
  duration    Int      
  showtimes   showtime[]
  cinemas     cinema_movie[]
}

model cinema {
  id          Int       @id @default(autoincrement())
  name        String
  location    String
  halls       hall[]
  movies      cinema_movie[]
}

model cinema_movie {
  cinemaId  Int
  movieId   Int
  cinema    cinema  @relation(fields: [cinemaId], references: [id])
  movie     movie   @relation(fields: [movieId], references: [id])
  @@id([cinemaId, movieId])
}

model hall {
  id          Int       @id @default(autoincrement())
  name        String
  cinema_id    Int
  cinema      cinema    @relation(fields: [cinema_id], references: [id])
  seats       seat[]
  showtimes   showtime[]
}

model seat {
  id          Int       @id @default(autoincrement())
  number      String
  hall_id      Int
  hall        hall      @relation(fields: [hall_id], references: [id])
  tickets     ticket[]
}

model showtime {
  id          Int       @id @default(autoincrement())
  startTime   DateTime
  movieId     Int
  movie       movie     @relation(fields: [movieId], references: [id])
  hall_id      Int
  hall        hall      @relation(fields: [hall_id], references: [id])
  tickets     ticket[]
}

model ticket {
  id          Int       @id @default(autoincrement())
  customer_id  Int?
  customer    customer? @relation(fields: [customer_id], references: [id])
  showtim_id  Int
  showtime    showtime  @relation(fields: [showtim_id], references: [id])
  seat_id      Int
  seat        seat      @relation(fields: [seat_id], references: [id])
  price       Float
}

model customer {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  tickets     ticket[]
}