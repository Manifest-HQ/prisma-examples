{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of an airline, with tables for flights, reservations, passengers, luggage and pilot."}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel flight {\\n  id          Int       @id @default(autoincrement())\\n  code        String    @unique\\n  origin      String\\n  destination String\\n  date        DateTime\\n  bookings    booking[]\\n  pilots      pilot_flight[]\\n  @@index([destination, origin])\\n}\\n\\nmodel booking {\\n  id          Int       @id @default(autoincrement())\\n  flightId    Int\\n  passengerId Int\\n  seat        String\\n  class       String\\n  flight      flight    @relation(fields: [flightId], references: [id])\\n  passenger   passenger @relation(fields: [passengerId], references: [id])\\n  luggage     luggage[]\\n  @@index([passengerId])\\n}\\n\\nmodel passenger {\\n  id          Int       @id @default(autoincrement())\\n  firstName   String\\n  lastName    String\\n  email       String    @unique\\n  bookings    booking[]\\n  @@index([firstName, lastName])\\n}\\n\\nmodel luggage {\\n  id          Int       @id @default(autoincrement())\\n  bookingId   Int\\n  weight      Float\\n  description String\\n  booking     booking   @relation(fields: [bookingId], references: [id])\\n}\\n\\nmodel pilot {\\n  id          Int       @id @default(autoincrement())\\n  firstName   String\\n  lastName    String\\n  license     String    @unique\\n  flights     pilot_flight[]   \\n  @@index([firstName, lastName])\\n}\\n\\nmodel pilot_flight {\\n  pilotId     Int\\n  flightId    Int\\n  pilot       pilot    @relation(fields: [pilotId], references: [id])\\n  flight      flight   @relation(fields: [flightId], references: [id])\\n  @@id([pilotId, flightId])\\n}\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Bank, with tables for Handling of accounts, transactions, and customer data."}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel customer {\\n  id        Int       @id @default(autoincrement())\\n  name      String\\n  email     String    @unique\\n  phone     String?\\n  accounts  account[]\\n}\\n\\nmodel account {\\n  id                  Int           @id @default(autoincrement())\\n  customerId          Int\\n  customer            customer      @relation(fields: [customerId], references: [id])\\n  type                String       \\n  balance             Float\\n  createdAt           DateTime      @default(now())\\n  transactionsOrigin  transaction[] @relation(\\\"Origin\\\")\\n  transactionsDestiny transaction[] @relation(\\\"Destiny\\\")\\n  branchId            Int           \\n  branch              branch        @relation(fields: [branchId], references: [id])\\n  loanId              Int\\n  loan                loan          @relation(fields: [loanId], references: [id])\\n}\\n\\nmodel transaction {\\n  id              Int      @id @default(autoincrement())\\n  accountOriginId Int\\n  accountDestinyId Int\\n  accountOrigin    account @relation(name: \\\"Origin\\\", fields: [accountOriginId], references: [id])\\n  accountDestiny   account @relation(name: \\\"Destiny\\\", fields: [accountDestinyId], references: [id])\\n  amount           Float\\n  date             DateTime @default(now())\\n}\\n\\nmodel employee {\\n  id       Int    @id @default(autoincrement())\\n  name     String\\n  position String\\n  email    String @unique\\n  branch   branch @relation(fields: [branchId], references: [id])\\n  branchId Int\\n}\\n\\nmodel branch {\\n  id       Int        @id @default(autoincrement())\\n  name     String\\n  location String\\n  employees employee[]\\n  accounts  account[]\\n}\\n\\nmodel loan {\\n  id          Int      @id @default(autoincrement())\\n  amount      Float\\n  interestRate Float\\n  startDate   DateTime\\n  dueDate     DateTime\\n  account     account[]\\n}\\n\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of a blog, with tables for posts, comments, categories, tags and users."}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel post {\\n  id        Int      @id @default(autoincrement())\\n  createdAt DateTime @default(now())\\n  updatedAt DateTime @updatedAt\\n  title     String   @db.VarChar(255)\\n  content   String?\\n  published Boolean  @default(false)\\n  author    user     @relation(fields: [authorId], references: [id])\\n  authorId  Int\\n  @@index([title,content])\\n}\\n\\nmodel profile {\\n  id     Int     @id @default(autoincrement())\\n  bio    String?\\n  user   user    @relation(fields: [userId], references: [id])\\n  userId Int     @unique\\n}\\n\\nmodel user {\\n  id      Int      @id @default(autoincrement())\\n  email   String   @unique\\n  name    String?\\n  posts   post[]\\n  profile profile?\\n}\\n\\n\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Cinemas with tables for Ticket sales, movie schedules, and theater managemen"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\n\\nmodel movie {\\n  id          Int       @id @default(autoincrement())\\n  title       String\\n  duration    Int       // Duration in minutes\\n  showtimes   showtime[]\\n}\\n\\nmodel cinema {\\n  id          Int       @id @default(autoincrement())\\n  name        String\\n  location    String\\n  halls       hall[]\\n}\\n\\nmodel hall {\\n  id          Int       @id @default(autoincrement())\\n  name        String\\n  cinemaId    Int\\n  cinema      cinema    @relation(fields: [cinemaId], references: [id])\\n  seats       seat[]\\n  showtimes   showtime[]\\n}\\n\\nmodel seat {\\n  id          Int       @id @default(autoincrement())\\n  number      String\\n  hallId      Int\\n  hall        hall      @relation(fields: [hallId], references: [id])\\n  tickets     ticket[]\\n}\\n\\nmodel showtime {\\n  id          Int       @id @default(autoincrement())\\n  startTime   DateTime\\n  movieId     Int\\n  movie       movie     @relation(fields: [movieId], references: [id])\\n  hallId      Int\\n  hall        hall      @relation(fields: [hallId], references: [id])\\n  tickets     ticket[]\\n}\\n\\nmodel ticket {\\n  id          Int       @id @default(autoincrement())\\n  customerId  Int?\\n  customer    customer? @relation(fields: [customerId], references: [id])\\n  showtimeId  Int\\n  showtime    showtime  @relation(fields: [showtimeId], references: [id])\\n  seatId      Int\\n  seat        seat      @relation(fields: [seatId], references: [id])\\n  price       Float\\n}\\n\\nmodel customer {\\n  id          Int       @id @default(autoincrement())\\n  name        String\\n  email       String    @unique\\n  tickets     ticket[]\\n}\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Conferences with tables for Participants, schedule, and ticket sales."}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel participant {\\n  id        Int       @id @default(autoincrement())\\n  name      String\\n  email     String    @unique\\n  tickets   ticket[]\\n  sessions  session[] @relation(\\\"sessionparticipants\\\")\\n}\\n\\nmodel session {\\n  id              Int           @id @default(autoincrement())\\n  title           String\\n  startTime       DateTime\\n  endTime         DateTime\\n  speakerId       Int\\n  speaker         speaker       @relation(fields: [speakerId], references: [id])\\n  participants    participant[] @relation(\\\"sessionparticipants\\\")\\n  eventId         Int           \\n  event           event         @relation(fields: [eventId], references: [id]) \\n}\\n\\nmodel speaker {\\n  id        Int       @id @default(autoincrement())\\n  name      String\\n  bio       String\\n  sessions  session[]\\n}\\n\\nmodel ticket {\\n  id            Int         @id @default(autoincrement())\\n  type          String\\n  price         Float\\n  participantId Int\\n  participant   participant @relation(fields: [participantId], references: [id])\\n  eventId       Int\\n  event         event       @relation(fields: [eventId], references: [id])\\n  @@index([participantId, eventId])\\n}\\n\\nmodel event {\\n  id        Int       @id @default(autoincrement())\\n  name      String\\n  location  String\\n  date      DateTime\\n  tickets   ticket[]\\n  sessions  session[]\\n  logistics logistics[]\\n  @@index([name, location, date])\\n}\\n\\nmodel logistics {\\n  id          Int     @id @default(autoincrement())\\n  description String\\n  eventId     Int\\n  event       event   @relation(fields: [eventId], references: [id])\\n}\\n\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Consultancies with tables for Projects, clients, and outcomes"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel client {\\n  id        Int      @id @default(autoincrement())\\n  name      String   @unique\\n  email     String   @unique\\n  projects  project[]\\n}\\n\\nmodel project {\\n  id          Int      @id @default(autoincrement())\\n  name        String\\n  description String\\n  clientId    Int\\n  client      client   @relation(fields: [clientId], references: [id])\\n  results     result[]\\n  @@index([name, description])\\n}\\n\\nmodel result {\\n  id          Int      @id @default(autoincrement())\\n  outcome     String\\n  projectId   Int\\n  project     project  @relation(fields: [projectId], references: [id])\\n  @@index([outcome])\\n}\\n\\n\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Data centers with tables for Infrastructure monitoring, incident management, and resource optimization"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel data_center {\\n  id          Int       @id @default(autoincrement())\\n  name        String    @unique\\n  location    String\\n  servers     server[]\\n  incidents   incident[]\\n}\\n\\nmodel server {\\n  id          Int       @id @default(autoincrement())\\n  hostname    String    @unique\\n  ipAddress   String    @unique\\n  data_centerId Int\\n  data_center  data_center @relation(fields: [data_centerId], references: [id])\\n  resources   resource[]\\n  incidents   incident[]\\n}\\n\\nmodel resource {\\n  id          Int       @id @default(autoincrement())\\n  type        String\\n  usage       Float\\n  serverId    Int\\n  server      server    @relation(fields: [serverId], references: [id])\\n}\\n\\nmodel incident {\\n  id          Int       @id @default(autoincrement())\\n  description String\\n  resolved    Boolean   @default(false)\\n  serverId    Int?\\n  server      server?   @relation(fields: [serverId], references: [id])\\n  data_centerId Int?\\n  data_center  data_center? @relation(fields: [data_centerId], references: [id])\\n  @@index([description,resolved])\\n}\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Design studios with tables fot Projects, clients, deliverables and state of delivers"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel project {\\n  id          Int          @id @default(autoincrement())\\n  name        String\\n  description String\\n  clientId    Int\\n  client      client       @relation(fields: [clientId], references: [id])\\n  deliverables deliverable[]\\n  @@index([name, description])\\n}\\n\\nmodel client {\\n  id       Int       @id @default(autoincrement())\\n  name     String\\n  email    String    @unique\\n  projects project[]\\n}\\n\\nmodel deliverable {\\n  id          Int      @id @default(autoincrement())\\n  title       String\\n  description String\\n  projectId   Int\\n  project     project  @relation(fields: [projectId], references: [id])\\n  statusId    Int\\n  status      status   @relation(fields: [statusId], references: [id])\\n  @@index([title, description])\\n}\\n\\nmodel status {\\n  id           Int           @id @default(autoincrement())\\n  name         String\\n  description  String\\n  deliverables deliverable[]\\n  @@index([name, description])\\n}\\n\\n\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of E-commerce with tables for Inventory management, customer orders, and product data"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel product {\\n  id            Int             @id @default(autoincrement())\\n  name          String\\n  description   String\\n  price         Float\\n  stock         Int\\n  categories    product_category[] \\n  orders        order_item[]\\n\\n  @@unique([name])\\n}\\n\\nmodel category {\\n  id       Int             @id @default(autoincrement())\\n  name     String\\n  products product_category[]\\n\\n  @@unique([name])\\n}\\n\\nmodel product_category {\\n  productId Int\\n  product   product @relation(fields: [productId], references: [id])\\n  categoryId Int\\n  category  category @relation(fields: [categoryId], references: [id])\\n\\n  @@id([productId, categoryId])\\n}\\n\\n\\nmodel customer {\\n  id      Int     @id @default(autoincrement())\\n  name    String\\n  email   String  @unique\\n  orders  order[]\\n}\\n\\nmodel order {\\n  id         Int         @id @default(autoincrement())\\n  createdAt  DateTime    @default(now())\\n  updatedAt  DateTime    @updatedAt\\n  status     order_status\\n  customer   customer    @relation(fields: [customerId], references: [id])\\n  customerId Int\\n  items      order_item[]\\n}\\n\\n\\nmodel order_item {\\n  id        Int     @id @default(autoincrement())\\n  order     order   @relation(fields: [orderId], references: [id])\\n  orderId   Int\\n  product   product @relation(fields: [productId], references: [id])\\n  productId Int\\n  quantity  Int\\n\\n  @@unique([orderId, productId])\\n}\\n\\nenum order_status {\\n  PENDING\\n  SHIPPED\\n  DELIVERED\\n  CANCELLED\\n}\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of galery art, with tables for  Artwork, artists and Exhibition"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel artwork {\\n  id                Int                 @id @default(autoincrement())\\n  title             String\\n  description       String?\\n  date              DateTime\\n  artistId          Int\\n  artist            artist              @relation(fields: [artistId], references: [id])\\n  artwork_exhibitions artwork_exhibition[]\\n}\\n\\nmodel artist {\\n  id        Int       @id @default(autoincrement())\\n  name      String\\n  biography String?\\n  artworks  artwork[]\\n}\\n\\nmodel exhibition {\\n  id              Int               @id @default(autoincrement())\\n  name            String\\n  start           DateTime\\n  end             DateTime?\\n  artwork_exhibitions artwork_exhibition[]\\n}\\n\\n\\nmodel artwork_exhibition {\\n  artworkId     Int\\n  exhibitionId  Int\\n  artwork       artwork      @relation(fields: [artworkId], references: [id])\\n  exhibition    exhibition   @relation(fields: [exhibitionId], references: [id])\\n  @@id([artworkId, exhibitionId])\\n}\\n\\n\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Libraries with tables for Book catalog, loans, and users"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel book {\\n  id        Int      @id @default(autoincrement())\\n  title     String\\n  author    String\\n  loans     loan[]\\n  @@index([title,author])\\n}\\n\\nmodel user {\\n  id        Int      @id @default(autoincrement())\\n  name      String\\n  loans     loan[]\\n}\\n\\nmodel loan {\\n  id        Int      @id @default(autoincrement())\\n  bookId    Int\\n  userId    Int\\n  book      book     @relation(fields: [bookId], references: [id])\\n  user      user     @relation(fields: [userId], references: [id])\\n  loanDate  DateTime\\n  returnDate DateTime?\\n}\\n\""}]}
{"messages": [{"role": "user", "content": "Give me a prisma schema for a relational database of Schools with tables for Student information, grades, Subjects, Courses and class schedules"}, {"role": "assistant", "content": "\"generator client {\\n  provider = \\\"prisma-client-js\\\"\\n}\\n\\ndatasource db {\\n  provider = \\\"postgresql\\\"\\n  url      = env(\\\"DATABASE_URL\\\")\\n}\\n\\nmodel student {\\n  id        Int       @id @default(autoincrement())\\n  name      String\\n  email     String    @unique\\n  grades    grade[]\\n  courses   course_students[]\\n  @@index([name, email])\\n}\\n\\nmodel grade {\\n  id         Int      @id @default(autoincrement())\\n  value      String\\n  studentId  Int\\n  subjectId  Int\\n  student    student  @relation(fields: [studentId], references: [id])\\n  subject    subject  @relation(fields: [subjectId], references: [id])\\n  @@index([value])\\n}\\n\\nmodel class_schedule {\\n  id         Int      @id @default(autoincrement())\\n  time       String\\n  courseId   Int\\n  course     course   @relation(fields: [courseId], references: [id])\\n}\\n\\nmodel course {\\n  id          Int             @id @default(autoincrement())\\n  name        String\\n  schedules   class_schedule[]\\n  students    course_students[]    \\n  subjects    course_subjects[]     \\n}\\n\\nmodel subject {\\n  id          Int       @id @default(autoincrement())\\n  name        String\\n  grades      grade[]\\n  courses     course_subjects[]  \\n}\\n\\nmodel course_students {\\n  student   student @relation(fields: [studentId], references: [id])\\n  studentId Int\\n  course    course  @relation(fields: [courseId], references: [id])\\n  courseId  Int\\n\\n  @@id([studentId, courseId])\\n}\\n\\nmodel course_subjects {\\n  course    course  @relation(fields: [courseId], references: [id])\\n  courseId  Int\\n  subject   subject @relation(fields: [subjectId], references: [id])\\n  subjectId Int\\n\\n  @@id([courseId, subjectId])\\n}\""}]}
